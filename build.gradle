plugins {
  id 'java'
  id 'com.matthewprenger.cursegradle' version '1.4.0'
  id 'eclipse'
  id 'idea'
  id 'maven-publish'
  id 'net.neoforged.gradle.userdev' version '7.0.105'//https://projects.neoforged.net/neoforged/neogradle
  //id 'nu.studer.credentials' version '1.0.7'
}

tasks.named('wrapper', Wrapper).configure {
  //Define wrapper values here so as to not have to always do so when updating gradlew.properties
  gradleVersion = '8.7'
}

version = "${version_major}.${version_minor}.${version_patch}"
base.archivesName = "${mod_id}_${mc_version}"

// Mojang ships Java 17 to end users in 1.18+.
java {
  toolchain {
    languageVersion.set(JavaLanguageVersion.of(17))
    vendor.set(JvmVendorSpec.JETBRAINS)
  }
}

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
runs {
  configureEach { net.neoforged.gradle.dsl.common.runs.run.Run run ->

    if (run.project.hasProperty('forge_force_ansi')) {
      //Force ansi if declared as a gradle variable, as the auto detection doesn't detect IntelliJ properly
      // or eclipse's plugin that adds support for ansi escape in console
      run.jvmArgument("-Dterminal.ansi=${run.project.property('forge_force_ansi')}")
    }

    run.modSource((SourceSet) sourceSets.main)

    //if the selected toolchain is a JBR, enable DCEVM
    if (run.project.javaToolchains.launcherFor(java.toolchain).map { it.metadata.vendor }.getOrElse("").contains("JetBrains")) {
      run.jvmArgument("-XX:+AllowEnhancedClassRedefinition")
    }
  }
  client {
    //The below if statements are to add args to your gradle.properties file in user home
    // (DO NOT add them directly to the gradle.properties file for this project)
    // Setting the below properties allows use of your normal Minecraft account in the
    // dev environment including having your skin load. Each property also has a comment
    // explaining what information to set the value to/format it expects
    // One thing to note is because of the caching that goes on, after changing these
    // variables, you need to refresh the project and rerun genIntellijRuns/genEclipseRuns
    if (project.hasProperty('mc_uuid')) {
      //Your uuid without any dashes in the middle
      programArguments('--uuid', (String) project.property('mc_uuid'))
    }
    if (project.hasProperty('mc_username')) {
      //Your username/display name, this is the name that shows up in chat
      // Note: This is not your email, even if you have a Mojang account
      programArguments('--username', (String) project.property('mc_username'))
    }
    if (project.hasProperty('mc_accessToken')) {
      //Your access token, you can find it in your '.minecraft/launcher_accounts.json' file
      programArguments('--accessToken', (String) project.property('mc_accessToken'))
    }
  }
  server {
  }
  data {
    programArguments('--all', '--output', project.file('src/generated/resources/').getAbsolutePath(),
            '--mod', 'advancements_tracker', '--existing', project.file('src/main/resources/').getAbsolutePath())
  }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

// Curse Maven
repositories {
  maven {
    url "https://www.cursemaven.com"
    content {
        includeGroup "curse.maven"
    }
  }
}

dependencies {
  implementation "net.neoforged:neoforge:${forge_version}"

  // Compability tests for better advancements
  // runtimeOnly fg.deobf("curse.maven:better-advancements-272515:3848978")
  // runtimeOnly fg.deobf("curse.maven:configured-457570:3822820")
}

// Example for how to get properties into the manifest for reading by the runtime..
tasks.named('jar', Jar).configure {
  duplicatesStrategy(DuplicatesStrategy.FAIL)
  manifest.attributes([
        "Specification-Title": "${mod_name}",
        "Specification-Vendor": "markusbordihn",
        "Specification-Version": "1", // We are version 1 of ourselves
        "Implementation-Title": project.name,
        "Implementation-Version": project.jar.archiveVersion,
        "Implementation-Vendor" :"${mod_id}",
        "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
        "Automatic-Module-Name"   : "advancements_tracker"
  ])
}

publishing {
  publications {
    mavenJava(MavenPublication) {
        artifact jar
    }
  }
  repositories {
    maven {
        url "file:///${project.projectDir}/mcmodsrepo"
    }
  }
}

/*curseforge {
  apiKey = "${credentials.curseforge_api_token}"
  project {
    id = "${curseforge_project_id}"
    changelog = file("./CHANGELOG.md")
    releaseType = "${curseforge_release_type}"
    addGameVersion("${mc_version}")
    addGameVersion("Forge")
    mainArtifact(jar) {
      relations {
        optionalDependency 'better-advancements'
        optionalDependency 'configured'
      }
    }
  }
}*/

tasks.withType(JavaCompile).configureEach {
  options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
  options.compilerArgs.addAll(["-Xmaxerrs", "100000"])
}
